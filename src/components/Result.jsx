import React from "react";
import { useLocation, useNavigate } from "react-router-dom";
import "../styles/Result.css";
import MapView from "../components/MapView";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";

function Result() {
  const location = useLocation();
  const navigate = useNavigate();
  const result = location.state;

  const handleBack = () => {
    navigate("/");
  };

  // Export to PDF function
  const exportToPDF = async () => {
    if (!result) return;

    try {
      const element = document.querySelector(".result-box");
      if (!element) return;

      // Create a clone for PDF generation with better styling
      const clone = element.cloneNode(true);
      clone.style.background = "white";
      clone.style.color = "black";
      clone.style.padding = "30px";
      clone.style.fontFamily = "Arial, sans-serif";
      clone.style.maxWidth = "800px";

      // Style all text elements for PDF
      const allElements = clone.querySelectorAll("*");
      allElements.forEach((el) => {
        el.style.color = "black";
        el.style.background = "transparent";
        el.style.boxShadow = "none";
        el.style.textShadow = "none";
        el.style.border = "none";
      });

      // Hide buttons in PDF
      const buttons = clone.querySelectorAll("button");
      buttons.forEach((btn) => (btn.style.display = "none"));

      // Style the map container
      const mapContainer = clone.querySelector(".map-container");
      if (mapContainer) {
        mapContainer.style.border = "1px solid #ccc";
        mapContainer.style.padding = "15px";
        mapContainer.style.marginTop = "20px";
      }

      // Temporarily add to document for rendering
      clone.style.position = "absolute";
      clone.style.left = "-9999px";
      clone.style.width = "800px";
      document.body.appendChild(clone);

      const canvas = await html2canvas(clone, {
        backgroundColor: "white",
        scale: 2,
        useCORS: true,
        allowTaint: true,
        height: clone.scrollHeight,
        width: clone.scrollWidth,
      });

      document.body.removeChild(clone);

      const imgData = canvas.toDataURL("image/png");
      const pdf = new jsPDF("p", "mm", "a4");

      // Add header
      pdf.setFontSize(20);
      pdf.setFont(undefined, "bold");
      pdf.text("Shipping Delay Prediction Report", 20, 20);

      pdf.setFontSize(12);
      pdf.setFont(undefined, "normal");
      pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 30);
      pdf.text(`Route: ${result.origin} ‚Üí ${result.destination}`, 20, 37);

      // Add the captured content
      const imgWidth = 170;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;

      let yPosition = 50;
      if (yPosition + imgHeight > 280) {
        pdf.addPage();
        yPosition = 20;
      }

      pdf.addImage(imgData, "PNG", 20, yPosition, imgWidth, imgHeight);

      // Add footer
      const pageCount = pdf.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        pdf.setPage(i);
        pdf.setFontSize(10);
        pdf.text(`Page ${i} of ${pageCount}`, 20, 290);
        pdf.text("Generated by SmartShip Prediction System", 130, 290);
      }

      const fileName = `Shipping_Prediction_${result.origin}_to_${
        result.destination
      }_${new Date().toISOString().split("T")[0]}.pdf`;
      pdf.save(fileName);
    } catch (error) {
      console.error("PDF export failed:", error);
      alert("Failed to export PDF. Please try again.");
    }
  };

  // Export to Excel function
  const exportToExcel = () => {
    if (!result) return;

    try {
      const workbook = XLSX.utils.book_new();

      // Create main data sheet
      const mainData = [];

      // Add header
      mainData.push(["Shipping Delay Prediction Report"]);
      mainData.push(["Generated on:", new Date().toLocaleDateString()]);
      mainData.push(["Generated at:", new Date().toLocaleTimeString()]);
      mainData.push([]);

      // Add route information
      mainData.push(["ROUTE INFORMATION"]);
      mainData.push(["Origin:", result.origin]);
      mainData.push(["Destination:", result.destination]);
      mainData.push(["Distance:", `${result.distance} km`]);
      mainData.push(["Estimated Time of Arrival:", `${result.eta} days`]);
      mainData.push([]);

      // Add prediction results
      mainData.push(["PREDICTION RESULTS"]);
      mainData.push(["Status:", result.prediction]);
      mainData.push([
        "Probability of Delay:",
        `${(result.probability * 100).toFixed(2)}%`,
      ]);
      mainData.push([
        "Confidence Level:",
        result.probability > 0.7
          ? "High"
          : result.probability > 0.4
          ? "Medium"
          : "Low",
      ]);
      mainData.push([]);

      // Add recommendation
      mainData.push(["RECOMMENDATION"]);
      mainData.push([result.suggestion]);
      mainData.push([]);

      // Add coordinates (for technical reference)
      mainData.push(["TECHNICAL DETAILS"]);
      mainData.push([
        "Origin Coordinates:",
        `${result.originCoords[0]}, ${result.originCoords[1]}`,
      ]);
      mainData.push([
        "Destination Coordinates:",
        `${result.destinationCoords[0]}, ${result.destinationCoords[1]}`,
      ]);
      mainData.push([]);

      // Add analysis summary
      mainData.push(["ANALYSIS SUMMARY"]);
      const riskLevel =
        result.probability > 0.7
          ? "High Risk"
          : result.probability > 0.4
          ? "Medium Risk"
          : "Low Risk";
      mainData.push(["Risk Level:", riskLevel]);

      const delayCategory =
        result.probability > 0.8
          ? "Severe Delay Expected"
          : result.probability > 0.6
          ? "Moderate Delay Likely"
          : result.probability > 0.3
          ? "Minor Delay Possible"
          : "On-Time Delivery Expected";
      mainData.push(["Delay Category:", delayCategory]);

      mainData.push(["Report Generated By:", "SmartShip AI Prediction System"]);

      const worksheet = XLSX.utils.aoa_to_sheet(mainData);

      // Set column widths
      worksheet["!cols"] = [{ width: 25 }, { width: 40 }];

      // Add some basic styling
      const range = XLSX.utils.decode_range(worksheet["!ref"]);
      for (let row = range.s.r; row <= range.e.r; row++) {
        for (let col = range.s.c; col <= range.e.c; col++) {
          const cellAddress = XLSX.utils.encode_cell({ r: row, c: col });
          if (!worksheet[cellAddress]) continue;

          // Style headers
          if (
            worksheet[cellAddress].v &&
            typeof worksheet[cellAddress].v === "string" &&
            (worksheet[cellAddress].v.includes("INFORMATION") ||
              worksheet[cellAddress].v.includes("RESULTS") ||
              worksheet[cellAddress].v.includes("RECOMMENDATION") ||
              worksheet[cellAddress].v.includes("DETAILS") ||
              worksheet[cellAddress].v.includes("SUMMARY"))
          ) {
            worksheet[cellAddress].s = {
              font: { bold: true, sz: 12 },
              fill: { fgColor: { rgb: "E6E6FA" } },
            };
          }
        }
      }

      XLSX.utils.book_append_sheet(workbook, worksheet, "Prediction Report");

      // Generate and save file
      const excelBuffer = XLSX.write(workbook, {
        bookType: "xlsx",
        type: "array",
      });
      const data = new Blob([excelBuffer], {
        type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
      });

      const fileName = `Shipping_Prediction_${result.origin}_to_${
        result.destination
      }_${new Date().toISOString().split("T")[0]}.xlsx`;
      saveAs(data, fileName);
    } catch (error) {
      console.error("Excel export failed:", error);
      alert("Failed to export Excel file. Please try again.");
    }
  };

  if (!result || result.error) {
    return (
      <div className="result-page">
        <div className="result-box">
          <h2>‚ö†Ô∏è Unable to Retrieve Prediction</h2>
          <p>{result?.error || "Something went wrong. Please try again."}</p>
          <button onClick={handleBack}>üîô Go Back</button>
        </div>
      </div>
    );
  }

  const [originLat, originLon] = result.originCoords;
  const [destLat, destLon] = result.destinationCoords;

  return (
    <div className="result-page">
      <div className="result-box">
        <div className="result-header">
          <h2>üì¶ Shipping Delay Prediction</h2>
          <div className="export-buttons">
            <button
              onClick={exportToPDF}
              className="export-btn pdf-btn"
              title="Export to PDF"
            >
              üìÑ PDF
            </button>
            <button
              onClick={exportToExcel}
              className="export-btn excel-btn"
              title="Export to Excel"
            >
              üìä Excel
            </button>
          </div>
        </div>

        <div className="result-item">
          <span className="label">Status:</span>
          <span className="value">{result.prediction}</span>
        </div>

        <div className="result-item">
          <span className="label">Probability of Delay:</span>
          <span className="value">
            {(result.probability * 100).toFixed(2)}%
          </span>
        </div>

        <div className="result-item">
          <span className="label">Recommendation:</span>
          <span className="value">{result.suggestion}</span>
        </div>

        <div className="map-container">
          <h3>üó∫Ô∏è Route Overview</h3>
          <MapView
            originCoords={{ lat: originLat, lon: originLon }}
            destinationCoords={{ lat: destLat, lon: destLon }}
          />
          <p className="map-info">
            From <b>{result.origin}</b> to <b>{result.destination}</b> ‚Äî
            Estimated Distance: <b>{result.distance} km</b>, ETA:{" "}
            <b>{result.eta} days</b>
          </p>
        </div>

        <button className="back-button" onClick={handleBack}>
          üîô Go Back
        </button>
      </div>
    </div>
  );
}

export default Result;
